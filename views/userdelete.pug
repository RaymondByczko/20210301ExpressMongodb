html
	head
		meta(
			name="viewport" content="width=device-width, initial-scale=1.0"
		)
		title= title
		link(href='style.css' rel='stylesheet'
		type='text/css')
		script
			include ../mongodbops.js
		script
			include ../bro_bundle2.js
		script
			include ../bro_temp.js
	body(class='flex-container')
		DIV(class='dbstatus-parent')
			DIV(class='dbstatus-success') Database Status
			if dbStatus == 'pingfailed'
				DIV(class='dbstatus-failed', id='dbstatus_id') #{dbStatus}
			else
				DIV(class='dbstatus-success' id='dbstatus_id') #{dbStatus}
		DIV
			BUTTON(class='dbcheck', type='button', onclick="fetch('/dbstatus').then(response => response.json()).then(data => {alert(JSON.stringify(data));document.querySelector('#dbstatus_id').innerHTML = data.pingstatus;})") Check
		DIV
			H1(class='h1_class') #{message}
		DIV
			form(action='/users' method='delete')
				label(
					for='users'
					class='home-label'
				) 	Choose user to delete:
				select(
					type='text'
					name='users_id'
					id='id_select'
				)
					option(
						value="1234"
					) SomeUserNameA
					option(
						value="5678"
					) OtherUserNameB
					- console.log("START POPULATE");
					- for (var i=0; i<=userAll.length-1; i++){
						- if (userAll[i]._id&&userAll[i].name) {
							option(value=userAll[i]._id) #{userAll[i].name}
						-		console.log("#### "+userAll[i].name);
						- }
					- }

				br()
				br()
				input(
					type='submit'
					Value='Submit'
					id='id_input'
				)
				br()
				br()
				script.
					function runAlert() {
						alert("From runAlert");
					}
				script.
					async function fetchDelete(users_id) {
						alert("fetchDelete: start1");
						try {
						let url = '/users';
						let data = {
							'users_id':users_id
						};
						let opt = {
							method: 'DELETE',
							headers: {
								'Content-Type':'application/json'
								//'Content-Type':'x-www-form-urlencoded'
							},
							body: JSON.stringify(data)
						}
						let retFetch = await fetch(url, opt);
						alert("retFetch="+retFetch);
						alert("retFetch.headers="+retFetch.headers);
						let i = 0;
						for (var pair of retFetch.headers.entries()){
							alert("pair0, pair1="+pair[0]+":"+pair[1]);
							i++;
							if (i==5) {
								break;
							}
						}
						alert("retFetch.body="+retFetch.body);
						let bd = await retFetch.body.json();
						alert("retFetch.body.json()="+bd);
						alert("retFetch.status="+retFetch.status);
						alert("JS(retFetch)="+JSON.stringify(retFetch));
						} catch (e) {
							alert("fetchDelete caught");
						}
					}
					async function onInputClick(e) {
						e.preventDefault();
						// e.document.q
						alert("onInputClick:start");
						let si = document.querySelector('#id_select').selectedIndex;
						let op = document.querySelector('#id_select').options;
						// let val = op[si].text;
						let val = op[si].value;
						alert("si="+si);
						alert("val="+val);
						if (window.fetch) {
							alert("fetch exists");
						} else {
							alert("fetch does not exist");
						}
						let retF = await fetchDelete(val);
						e.stopPropagation();
						// e.preventDefault();
						alert("getUserAll: before");
						runAlert();
						alertBroTemp();
						let userAll = await bro2.getUserAll(null, null);
						alert("getUserAll: after");
					}
					document.querySelector('#id_input').addEventListener('click', onInputClick);
